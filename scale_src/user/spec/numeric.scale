import std;

test "i32 compare" {
    std.assert(1 == 1);
    std.assert(1 != 2);
    std.assert(1 < 2);
    std.assert(1 <= 2);
    std.assert(2 <= 2);
    std.assert(2 > 1);
    std.assert(2 >= 1);
    std.assert(2 >= 2)
}

test "i32 add" {
    std.assert(1 + 2 == 3);
    std.assert(1 - 2 == -1)
}

test "i32 mul" {
    std.assert(3 * 7 == 21);
    std.assert(-3 * 7 == -21);
    std.assert(3 * -7 == -21);
    std.assert(-3 * -7 == 21)
}

test "i32 div" {
    std.assert(7 / 2 == 3);
    std.assert(-7 / 2 == -3);
    std.assert(7 / -2 == -3);
    std.assert(-7 / -2 == 3)
}

// NOTE: current a remainder operation - should it be modulo?  ((m % n) + n) % n
test "i32 mod" {
    std.assert(7 % 3 == 1);
    std.assert(-7 % 3 == -1);
    std.assert(7 % -3 == 1);
    std.assert(-7 % -3 == -1)
}


test "f32 compare" {
    std.assert(1.0 == 1.0);
    std.assert(1.0 != 2.1);
    std.assert(1.0 < 1.1);
    std.assert(1.0 <= 1.1);
    std.assert(1.1 <= 1.1);
    std.assert(1.1 > 1.0);
    std.assert(1.1 >= 1.0);
    std.assert(1.1 >= 1.1)
}

test "f32 add" {
    std.assert(1.0 + 2.5 == 3.5);
    std.assert(1.0 - 2.5 == -1.5)
}

test "f32 mul" {
    std.assert(3.0 * 7.5 == 22.5);
    std.assert(-3.0 * 7.5 == -22.5);
    std.assert(3.0 * -7.5 == -22.5);
    std.assert(-3.0 * -7.5 == 22.5)
}

test "f32 div" {
    std.assert(5.0 / 4.0 == 1.25);
    std.assert(-5.0 / 4.0 == -1.25);
    std.assert(5.0 / -4.0 == -1.25);
    std.assert(-5.0 / -4.0 == 1.25)
}

// TODO: floating point modulus has some subtleties.