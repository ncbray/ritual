import std;

struct Bundle {
    a:Vec3;
    b:Vec3;
}

struct Vec3 {
    x:f32;
    y:f32;
    z:f32;

    fn dot(other:Vec3) -> f32 {
        self.x * other.x + self.y * other.y + self.z * other.z
    }
}

struct SimpleInline {
    n0:i32;
    n1:i32;
}

class SimpleIndirect {
    n0:i32;
    n1:i32;
}

test "struct constructor" {
    let v = Vec3(1.0, 2.0, 3.0);
    std.assert(1.0 == v.x);
    std.assert(2.0 == v.y);
    std.assert(3.0 == v.z);
}

test "struct setter" {
    let v = Vec3(1.0, 2.0, 3.0);
    std.assert(1.0 == v.x);
    v.x = 7.0;
    std.assert(7.0 == v.x);
}

test "struct copy" {
    let a = Vec3(1.0, 2.0, 3.0);
    let b = a;
    b.x = 4.0;
    std.assert(1.0 == a.x);
    std.assert(4.0 == b.x);
}

test "method" {
    let a = Vec3(1.0, 2.0, 3.0);
    let b = Vec3(11.0, 7.0, 5.0);
    std.assert(a.dot(b) == 40.0);
}

test "compound constructor" {
    let bun = Bundle(Vec3(1.0, 2.0, 3.0), Vec3(4.0, 5.0, 6.0));
    std.assert(1.0 == bun.a.x);
    std.assert(2.0 == bun.a.y);
    std.assert(3.0 == bun.a.z);
    std.assert(4.0 == bun.b.x);
    std.assert(5.0 == bun.b.y);
    std.assert(6.0 == bun.b.z);
}

test "deep copy" {
    let bun = Bundle(Vec3(1.0, 2.0, 3.0), Vec3(4.0, 5.0, 6.0));
    bun.b = bun.a;
    bun.a.x = 7.0;
    std.assert(7.0 == bun.a.x);
    std.assert(2.0 == bun.a.y);
    std.assert(1.0 == bun.b.x);
    std.assert(2.0 == bun.b.y);
}

test "inherit" {
    let obj = Child(1, 2, 3);
    std.assertEqualI32(obj.a, 1);
    std.assertEqualI32(obj.b, 2);
    std.assertEqualI32(obj.c, 3);
}

class Child : Inbetween {
    c:i32;
    fn sum() -> i32 {
        self.a + self.b + self.c
    }
}

class Inbetween: Base {
    b:i32;
    fn sum() -> i32 {
        self.a + self.b
    }
}

class Base {
    a:i32;
    fn sum() -> i32 {
        self.a
    }
}

fn type_merge(cond:bool) -> Base {
    if cond {
        Child(3, 2, 1)
    } else {
        Inbetween(2, 1)
    }
}

test "inherit merge leaf" {
    let v = type_merge(true);
    std.assertEqualI32(v.a, 3);
    std.assertEqualI32(v.sum(), 6);
}

test "inherit merge branch" {
    let v = type_merge(false);
    std.assertEqualI32(v.a, 2);
    std.assertEqualI32(v.sum(), 3);
}

fn type_match(v:Base) -> i32 {
    match v {
        case Child: 3
        case Inbetween: 2
        case Base: 1
    }
}

test "simple inherit switch leaf" {
    std.assertEqualI32(type_match(type_merge(true)), 3);
}

test "simple inherit switch branch" {
    std.assertEqualI32(type_match(type_merge(false)), 2);
}

class Holder {
    value:i32;
}

test "class constructor" {
    let h = Holder(7);
    std.assertEqualI32(h.value, 7)
}

test "class alias" {
    let h1 = Holder(7);
    let h2 = h1;
    h1.value = 11;
    std.assertEqualI32(h2.value, 11);
}

test "tuple destructure swap" {
    let a = 7;
    let b = 11;
    (b, a) = (a, b);
    std.assertEqualI32(a, 11);
    std.assertEqualI32(b, 7);
}

test "tuple destructure field targets inline" {
    let s = SimpleInline(0, 0);
    let a = 7;
    let b = 11;
    (s.n0, s.n1) = (a, b);
    std.assertEqualI32(s.n0, 7);
    std.assertEqualI32(s.n1, 11);

    (s.n1, s.n0) = (s.n0, s.n1);
    std.assertEqualI32(s.n0, 11);
    std.assertEqualI32(s.n1, 7);
}

test "tuple destructure field targets indirect" {
    let s = SimpleIndirect(0, 0);
    let a = 7;
    let b = 11;
    (s.n0, s.n1) = (a, b);
    std.assertEqualI32(s.n0, 7);
    std.assertEqualI32(s.n1, 11);

    (s.n1, s.n0) = (s.n0, s.n1);
    std.assertEqualI32(s.n0, 11);
    std.assertEqualI32(s.n1, 7);
}

test "tuple destructure field order matters" {
    let s0 = SimpleIndirect(0, 0);
    let s1 = SimpleIndirect(7, 11);
    let s2 = s0;
    (s2.n0, s2, s2.n0) = (5, s1, 13);
    std.assertEqualI32(s0.n0, 5);
    std.assertEqualI32(s1.n0, 13);
}

test "struct destructure" {
    let v = Vec3(1.0, 2.0, 3.0);
    let (a, b, c) = v;
    std.assert(1.0 == a);
    std.assert(2.0 == b);
    std.assert(3.0 == c);
}